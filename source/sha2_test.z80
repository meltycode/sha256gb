;tab4:UTF-8
;
;   SHA2-256 Test
;
;	2021/04/23
;
; RGBDS ver.5.0 https://rgbds.gbdev.io/docs/v0.5.0/rgbasm.5
;
	INCLUDE "HARDWARE.INC"					;お約束


SECTION "V Blank",ROM0[$40]
	reti
SECTION "LCDC Status Interrupt",ROM0[$48]
	reti
SECTION "Timer Interrupt",ROM0[$50]
	reti
SECTION "Serial Interrupt",ROM0[$58]
	reti
SECTION "Keypad Interrupt",ROM0[$60]
	reti
SECTION "Org $100",ROM0[$100]
	nop										;起動直後 SP=$FFFE
	jp			begin
	NINTENDO_LOGO                   		; Nintendo graphic logo

;Rom Header Info
;				 123456789abcdef
	DB			"SHA2 TEST" 	   			; Game Name
	DB			0,0,0,0,0,0			        ; Padding to 15 characters
	DB			$00							; 0 - MGB / $80 - Color compatible /
	DB			0,0							; Game Maker Code
	DB			0                   		; Game Unit Code
	DB			CART_ROM_MBC1			   	; Cart type
	DB			CART_ROM_256K				; ROM Size (in bits)
	DB			CART_RAM_NONE				; RAM Size (in bits)
	DB			0,1                     	; Maker ID
	DB 			0                       	; Version=0
	DB 			$00                     	; Complement check (important)
	DW 			$0000                   	; Checksum (not important)

;*********************************************************************
	SECTION "Main Code",ROM0[$150]

macro	LoopMacBC
	ld			bc,(((\1 & $FF) << 8) + (((\1 - 1) >> 8) + 1) & $FF) & $FFFF
endm									;djnz が内側になるように下位を b に上位を c にする

begin:
	di
	call		Initialize
	call		FontSet

	ld			hl,Msg1
	ld			de,$9800+32*0+2
	call		PutMsg

	ld			hl,Msg2
	ld			de,$9800+32*3+0
	call		PutMsg

	call		ScreenOnVB
	di

Main:
	ld			hl,TestBin				;input
	ld			de,4096					;length

;	ld			de,0
;SHA256("") 空の入力に対しての結果
;0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855

	call		sha2_256				;calc sha2(256) hash

	call		DispResult
	jr			@

Msg1:
	db	"SHA2 Calculation",0
Msg2:
	db	"Result is...",0

;

;------------------------------------------------------------------------------
PutMsg:
	ld			a,[hl+]
	or			a
	ret			z
	call		PutChr
	jr			PutMsg

PutChr:
	cp			"\n"
	jr			nz,.skip
	ld			a,e
	and			~31
	add			a,32
	ld			e,a
	adc			a,d
	sub			e
	ld			d,a
	ret
.skip:
	sub			$20
	push		hl
	ld			h,d
	ld			l,e
.loop:
	ld			[hl],a						;確実に書き込む
	cp			[hl]
	jr			nz,.loop
	pop			hl
	inc			de							;x++
	ret
;------------------------------------------------------------------------------
DispResult:
	ld			de,$9800+32*4+2

	ld			hl,sha2_hash
	ld			c,4
.loop1:
	ld			b,8
.loop2:
	ld			a,[hl+]
	call		.sub
	dec			b
	jr			nz,.loop2
	ld			a,"\n"
	call		PutChr
	inc			de
	inc			de							;x=2
	dec			c
	jr			nz,.loop1
	ret

.sub:
	push		af

	swap		a
	and			$0F
	add			a,$90
	daa
	adc			a,$40
	daa
	call		PutChr

	pop			af
	and			$0F
	add			a,$90
	daa
	adc			a,$40
	daa
	jp			PutChr


;--------------------------------------------------------------------------------------------------
FontSet:
	xor			a
	ldh			[rVBK],a

	ld			hl,Font						;フォントデータをタイル VRAM に転送
	ld			de,$9000
	ld			bc,96*8
.loop:
	ld			a,[hl+]
	ld			[de],a
	inc			de
	ld			[de],a
	inc			de
	dec			bc
	ld			a,b
	or			c
	jr			nz,.loop
	ret

Font:										;96chr * 8bytes = 768bytes
	db	$00,$00,$00,$00,$00,$00,$00,$00
	db	$18,$18,$18,$18,$18,$00,$18,$00
	db	$66,$66,$44,$00,$00,$00,$00,$00
	db	$00,$24,$7E,$24,$24,$7E,$24,$00
	db	$14,$3E,$55,$3C,$1E,$55,$3E,$14
	db	$62,$66,$0C,$18,$30,$66,$46,$00
	db	$78,$CC,$61,$CE,$CC,$CC,$78,$00
	db	$18,$18,$10,$00,$00,$00,$00,$00
	db	$04,$08,$18,$18,$18,$18,$08,$04
	db	$20,$10,$18,$18,$18,$18,$10,$20
	db	$00,$54,$38,$FE,$38,$54,$00,$00
	db	$00,$18,$18,$7E,$18,$18,$00,$00
	db	$00,$00,$00,$00,$00,$30,$30,$20
	db	$00,$00,$00,$3C,$00,$00,$00,$00
	db	$00,$00,$00,$00,$00,$18,$18,$00
	db	$03,$06,$0C,$18,$30,$60,$C0,$00
	db	$3C,$66,$6E,$76,$66,$66,$3C,$00
	db	$18,$38,$18,$18,$18,$18,$18,$00
	db	$3C,$66,$0E,$1C,$38,$70,$7E,$00
	db	$7E,$0C,$18,$3C,$06,$46,$3C,$00
	db	$0C,$1C,$2C,$4C,$7E,$0C,$0C,$00
	db	$7E,$60,$7C,$06,$06,$46,$3C,$00
	db	$1C,$20,$60,$7C,$66,$66,$3C,$00
	db	$7E,$06,$0E,$1C,$18,$18,$18,$00
	db	$3C,$66,$66,$3C,$66,$66,$3C,$00
	db	$3C,$66,$66,$3E,$06,$0C,$38,$00
	db	$00,$18,$18,$00,$00,$18,$18,$00
	db	$00,$18,$18,$00,$18,$18,$10,$00
	db	$06,$0C,$18,$30,$18,$0C,$06,$00
	db	$00,$00,$3C,$00,$00,$3C,$00,$00
	db	$60,$30,$18,$0C,$18,$30,$60,$00
	db	$3C,$46,$06,$0C,$18,$18,$00,$18
	db	$3C,$66,$6E,$6A,$6E,$60,$3C,$00
	db	$3C,$66,$66,$7E,$66,$66,$66,$00
	db	$7C,$66,$66,$7C,$66,$66,$7C,$00
	db	$3C,$62,$60,$60,$60,$62,$3C,$00
	db	$7C,$66,$66,$66,$66,$66,$7C,$00
	db	$7E,$60,$60,$7C,$60,$60,$7E,$00
	db	$7E,$60,$60,$7C,$60,$60,$60,$00
	db	$3C,$62,$60,$6E,$66,$66,$3E,$00
	db	$66,$66,$66,$7E,$66,$66,$66,$00
	db	$18,$18,$18,$18,$18,$18,$18,$00
	db	$06,$06,$06,$06,$06,$46,$3C,$00
	db	$66,$6C,$78,$70,$78,$6C,$66,$00
	db	$60,$60,$60,$60,$60,$60,$7C,$00
	db	$FC,$D6,$D6,$D6,$D6,$C6,$C6,$00
	db	$62,$72,$7A,$5E,$4E,$46,$42,$00
	db	$3C,$66,$66,$66,$66,$66,$3C,$00
	db	$7C,$66,$66,$7C,$60,$60,$60,$00
	db	$3C,$66,$66,$66,$66,$66,$3C,$06
	db	$7C,$66,$66,$7C,$66,$66,$66,$00
	db	$3C,$62,$70,$3C,$0E,$46,$3C,$00
	db	$7E,$18,$18,$18,$18,$18,$18,$00
	db	$66,$66,$66,$66,$66,$66,$3C,$00
	db	$66,$66,$66,$66,$66,$64,$78,$00
	db	$C6,$C6,$C6,$D6,$D6,$D6,$FC,$00
	db	$66,$66,$66,$3C,$66,$66,$66,$00
	db	$66,$66,$66,$3C,$18,$18,$18,$00
	db	$7E,$0E,$1C,$38,$70,$60,$7E,$00
	db	$1E,$18,$18,$18,$18,$18,$1E,$00
	db	$40,$60,$30,$18,$0C,$06,$02,$00
	db	$78,$18,$18,$18,$18,$18,$78,$00
	db	$10,$38,$6C,$00,$00,$00,$00,$00
	db	$00,$00,$00,$00,$00,$00,$7E,$00
	db	$00,$C0,$C0,$60,$00,$00,$00,$00
	db	$00,$3C,$46,$3E,$66,$66,$3E,$00
	db	$60,$7C,$66,$66,$66,$66,$7C,$00
	db	$00,$3C,$62,$60,$60,$62,$3C,$00
	db	$06,$3E,$66,$66,$66,$66,$3E,$00
	db	$00,$3C,$66,$7E,$60,$62,$3C,$00
	db	$1E,$30,$7C,$30,$30,$30,$30,$00
	db	$00,$3E,$66,$66,$66,$3E,$46,$3C
	db	$60,$7C,$66,$66,$66,$66,$66,$00
	db	$18,$00,$18,$18,$18,$18,$18,$00
	db	$00,$08,$18,$18,$18,$18,$58,$30
	db	$60,$64,$68,$70,$78,$6C,$66,$00
	db	$18,$18,$18,$18,$18,$18,$0C,$00
	db	$00,$FC,$D6,$D6,$D6,$D6,$C6,$00
	db	$00,$7C,$66,$66,$66,$66,$66,$00
	db	$00,$3C,$66,$66,$66,$66,$3C,$00
	db	$00,$7C,$66,$66,$66,$7C,$60,$60
	db	$00,$3E,$66,$66,$66,$66,$3E,$06
	db	$00,$6C,$70,$60,$60,$60,$60,$00
	db	$00,$3C,$72,$38,$1C,$4E,$3C,$00
	db	$18,$3C,$18,$18,$18,$18,$0C,$00
	db	$00,$66,$66,$66,$66,$66,$3E,$00
	db	$00,$66,$66,$66,$66,$64,$78,$00
	db	$00,$C6,$C6,$D6,$D6,$D6,$FC,$00
	db	$00,$66,$66,$3C,$66,$66,$66,$00
	db	$00,$66,$66,$66,$26,$1E,$46,$3C
	db	$00,$7E,$0E,$1C,$38,$70,$7E,$00
	db	$0E,$18,$18,$30,$18,$18,$0E,$00
	db	$18,$18,$18,$18,$18,$18,$18,$18
	db	$70,$18,$18,$0C,$18,$18,$70,$00
	db	$00,$60,$F2,$9E,$0C,$00,$00,$00
	db	$10,$10,$28,$28,$44,$44,$82,$FE

	include	"gb_routine.z80"
	include	"sha2_gb.z80"

;--------------------------------------------------------------------------------------------------
SECTION "WORK RAM",WRAM0[$C000]
OAM_BUFFER:		ds	$A0

;--------------------------------------------------------------------------------------------------
SECTION "HI-RAM",HRAM[$FF80]
SPRITE_ROUTINE:			ds	$0A
_Pad:			db
_PadDebounce:	db


;--------------------------------------------------------------------------------------------------
section "Data Rom Bank",ROMX[$4000],BANK[1]

TestBin:
	incbin	"fami_basic_font.bin"		;sha2(256):A4BD7CBF347D3861920FE29B0F955A5C43FF43BA0173D53D48BA5B1CD99F1B05


